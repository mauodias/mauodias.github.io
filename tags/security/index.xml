<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on mauricio.cc</title>
    <link>http://localhost:1313/tags/security/</link>
    <description>Recent content in Security on mauricio.cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 15:04:11 -0300</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Insights on Personal Privacy and Security</title>
      <link>http://localhost:1313/post/insights-on-personal-privacy-and-security/</link>
      <pubDate>Fri, 15 Mar 2019 15:04:11 -0300</pubDate>
      
      <guid>http://localhost:1313/post/insights-on-personal-privacy-and-security/</guid>
      <description>This was intended initially to be an email to a security mailing list on ThoughtWorks, the company I&amp;rsquo;m currently working on. But, after reading it several times (considering that it is sitting in Draft for much longer than what I wanted), I decided to make a post out of it. There are some interesting points and tool recommendations, and to be able to receive proper feedback on it, I&amp;rsquo;m enabling Disqus!</description>
    </item>
    
    <item>
      <title>Database Credential Leasing With Vault</title>
      <link>http://localhost:1313/post/database-credential-leasing-with-vault/</link>
      <pubDate>Tue, 12 Mar 2019 09:55:35 -0300</pubDate>
      
      <guid>http://localhost:1313/post/database-credential-leasing-with-vault/</guid>
      <description>One of the biggest concerns of reasonably large projects and applications is the management of secrets. We have them laying everywhere, and there&amp;rsquo;s not much to do about it. We may need access tokens, passwords, credentials and much more. How should we handle those secrets? What is the best way to move such data around, to store them and to use, without chances of leaking by accident (or even intentionally) and, if such an incident happens, what are good ways to minimize the damage?</description>
    </item>
    
  </channel>
</rss>